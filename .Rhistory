container = c(caf_temp(rts_corr[1], rts_err[1]),
caf_temp(rts_corr[-1], rts_err[-1]))
return(container)
}
caf_temp(rts_corr[1], rts_err[1])
caf_temp(rts_corr[-1], rts_err[-1])
c(caf_temp(rts_corr[1], rts_err[1]),
caf_temp(rts_corr[-1], rts_err[-1]))
caf_temp <- function(rts_corr, rts_err) {
stopifnot(length(rts_corr) == length(rts_err))
if (length(rts_corr) == 1) {
rts_corr = rts_corr[[1]]
rts_err = rts_err[[1]]
rts = c(rts_corr, rts_err)
probs = default_caf_probs()
borders <- quantile(rts, probs = probs)
bins <- cut(rts, breaks = borders, labels = FALSE, include.lowest = TRUE)
stopifnot(length(unique(bins)) ==  length(probs)-1)
corr = rep(c(1,0), times = c(length(rts_corr), length(rts_err)))
temp = data.frame(corr = corr,
bins = bins)
caf = tapply(corr, bins, mean)
caf = data.frame(bins = names(caf),
caf = as.numeric(caf))
return(list(caf))
}
container = c(caf_temp(rts_corr[1], rts_err[1]),
caf_temp(rts_corr[-1], rts_err[-1]))
return(container)
}
caf_temp(rts_corr, rts_err)
drift_dm_obj$obs_data$rts_corr
stopifnot(names(drift_dm_obj$obs_data$rts_corr))
names(drift_dm_obj$obs_data$rts_corr)
all_rts_corr = drift_dm_obj$obs_data$rts_corr
all_rts_err = drift_dm_obj$obs_data$rts_err
stopifnot(names(all_rts_corr) != names(all_rts_err))
names(all_rts_corr)
names(all_rts_err)
stopifnot(all(names(all_rts_corr) != names(all_rts_err)))
stopifnot(all(names(all_rts_corr) == names(all_rts_err)))
if (is.null(drift_dm_obj$obs_data$rts_err))
return(NULL)
# rts_corr and rts_err are a list of rts. Calculates the caf using recursion
caf_temp <- function(rts_corr, rts_err) {
stopifnot(length(rts_corr) == length(rts_err))
if (length(rts_corr) == 1) {
rts_corr = rts_corr[[1]]
rts_err = rts_err[[1]]
rts = c(rts_corr, rts_err)
probs = default_caf_probs()
borders <- quantile(rts, probs = probs)
bins <- cut(rts, breaks = borders, labels = FALSE, include.lowest = TRUE)
stopifnot(length(unique(bins)) ==  length(probs)-1)
corr = rep(c(1,0), times = c(length(rts_corr), length(rts_err)))
temp = data.frame(corr = corr,
bins = bins)
caf = tapply(corr, bins, mean)
caf = data.frame(bins = names(caf),
caf = as.numeric(caf))
return(list(caf))
}
container = c(caf_temp(rts_corr[1], rts_err[1]),
caf_temp(rts_corr[-1], rts_err[-1]))
return(container)
}
all_cafs = caf_temp(rts_comp, rts_err)
all_rts_corr = drift_dm_obj$obs_data$rts_corr
all_rts_err = drift_dm_obj$obs_data$rts_err
all_cafs = caf_temp(all_rts_corr, all_rts_err)
all_cafs
name(rts_corr)
names(rts_corr)
names(rts_corr[1])
# rts_corr and rts_err are a list of rts. Calculates the caf using recursion
caf_temp <- function(rts_corr, rts_err) {
stopifnot(length(rts_corr) == length(rts_err))
if (length(rts_corr) == 1) {
rts_corr = rts_corr[[1]]
rts_err = rts_err[[1]]
rts = c(rts_corr, rts_err)
probs = default_caf_probs()
borders <- quantile(rts, probs = probs)
bins <- cut(rts, breaks = borders, labels = FALSE, include.lowest = TRUE)
stopifnot(length(unique(bins)) ==  length(probs)-1)
corr = rep(c(1,0), times = c(length(rts_corr), length(rts_err)))
temp = data.frame(corr = corr,
bins = bins)
caf = tapply(corr, bins, mean)
caf = data.frame(Bin = names(caf),
Caf = as.numeric(caf),
Cond = names(rts_corr[[1]]))
return(list(caf))
}
container = c(caf_temp(rts_corr[1], rts_err[1]),
caf_temp(rts_corr[-1], rts_err[-1]))
return(container)
}
all_cafs = caf_temp(all_rts_corr, all_rts_err)
# rts_corr and rts_err are a list of rts. Calculates the caf using recursion
caf_temp <- function(rts_corr, rts_err) {
stopifnot(length(rts_corr) == length(rts_err))
if (length(rts_corr) == 1) {
rts_corr = rts_corr[[1]]
rts_err = rts_err[[1]]
rts = c(rts_corr, rts_err)
probs = default_caf_probs()
borders <- quantile(rts, probs = probs)
bins <- cut(rts, breaks = borders, labels = FALSE, include.lowest = TRUE)
stopifnot(length(unique(bins)) ==  length(probs)-1)
corr = rep(c(1,0), times = c(length(rts_corr), length(rts_err)))
temp = data.frame(corr = corr,
bins = bins)
caf = tapply(corr, bins, mean)
caf = data.frame(Bin = names(caf),
Caf = as.numeric(caf),
Cond = names(rts_corr))
return(list(caf))
}
container = c(caf_temp(rts_corr[1], rts_err[1]),
caf_temp(rts_corr[-1], rts_err[-1]))
return(container)
}
all_cafs = caf_temp(all_rts_corr, all_rts_err)
# rts_corr and rts_err are a list of rts. Calculates the caf using recursion
caf_temp <- function(rts_corr, rts_err) {
stopifnot(length(rts_corr) == length(rts_err))
if (length(rts_corr) == 1) {
rts_corr = rts_corr[[1]]
rts_err = rts_err[[1]]
rts = c(rts_corr, rts_err)
probs = default_caf_probs()
borders <- quantile(rts, probs = probs)
bins <- cut(rts, breaks = borders, labels = FALSE, include.lowest = TRUE)
stopifnot(length(unique(bins)) ==  length(probs)-1)
corr = rep(c(1,0), times = c(length(rts_corr), length(rts_err)))
temp = data.frame(corr = corr,
bins = bins)
caf = tapply(corr, bins, mean)
caf = data.frame(Bin = names(caf),
Caf = as.numeric(caf),
Cond = names(rts_corr))
return(list(caf))
}
container = c(caf_temp(rts_corr[1], rts_err[1]),
caf_temp(rts_corr[-1], rts_err[-1]))
return(container)
}
all_cafs = caf_temp(all_rts_corr, all_rts_err)
calc_cafs_obs <- function(drift_dm_obj) {
if (is.null(drift_dm_obj$obs_data$rts_corr))
return(NULL)
if (is.null(drift_dm_obj$obs_data$rts_err))
return(NULL)
all_rts_corr = drift_dm_obj$obs_data$rts_corr
all_rts_err = drift_dm_obj$obs_data$rts_err
stopifnot(all(names(all_rts_corr) == names(all_rts_err)))
# rts_corr and rts_err are a list of rts. Calculates the caf using recursion
caf_temp <- function(list_rts_corr, list_rts_err) {
stopifnot(length(list_rts_corr) == length(list_rts_err))
if (length(rts_corr) == 1) {
rts_corr = list_rts_corr[[1]]
rts_err = list_rts_err[[1]]
rts = c(rts_corr, rts_err)
probs = default_caf_probs()
borders <- quantile(rts, probs = probs)
bins <- cut(rts, breaks = borders, labels = FALSE, include.lowest = TRUE)
stopifnot(length(unique(bins)) ==  length(probs)-1)
corr = rep(c(1,0), times = c(length(rts_corr), length(rts_err)))
temp = data.frame(corr = corr,
bins = bins)
caf = tapply(corr, bins, mean)
caf = data.frame(Bin = names(caf),
Caf = as.numeric(caf),
Cond = names(list_rts_corr))
return(list(caf))
}
container = c(caf_temp(list_rts_corr[1], list_rts_err[1]),
caf_temp(list_rts_cor[-1], list_rts_err[-1]))
return(container)
}
all_cafs = caf_temp(all_rts_corr, all_rts_err)
caf_final <- do.call(rbind, all_cafs)
return(caf_final)
}
# rts_corr and rts_err are a list of rts. Calculates the caf using recursion
caf_temp <- function(list_rts_corr, list_rts_err) {
stopifnot(length(list_rts_corr) == length(list_rts_err))
if (length(rts_corr) == 1) {
rts_corr = list_rts_corr[[1]]
rts_err = list_rts_err[[1]]
rts = c(rts_corr, rts_err)
probs = default_caf_probs()
borders <- quantile(rts, probs = probs)
bins <- cut(rts, breaks = borders, labels = FALSE, include.lowest = TRUE)
stopifnot(length(unique(bins)) ==  length(probs)-1)
corr = rep(c(1,0), times = c(length(rts_corr), length(rts_err)))
temp = data.frame(corr = corr,
bins = bins)
caf = tapply(corr, bins, mean)
caf = data.frame(Bin = names(caf),
Caf = as.numeric(caf),
Cond = names(list_rts_corr))
return(list(caf))
}
container = c(caf_temp(list_rts_corr[1], list_rts_err[1]),
caf_temp(list_rts_cor[-1], list_rts_err[-1]))
return(container)
}
all_cafs = caf_temp(all_rts_corr, all_rts_err)
all_cafs = caf_temp(all_rts_corr, all_rts_err)
# rts_corr and rts_err are a list of rts. Calculates the caf using recursion
caf_temp <- function(list_rts_corr, list_rts_err) {
stopifnot(length(list_rts_corr) == length(list_rts_err))
if (length(rts_corr) == 1) {
rts_corr = list_rts_corr[[1]]
rts_err = list_rts_err[[1]]
rts = c(rts_corr, rts_err)
probs = default_caf_probs()
borders <- quantile(rts, probs = probs)
bins <- cut(rts, breaks = borders, labels = FALSE, include.lowest = TRUE)
stopifnot(length(unique(bins)) ==  length(probs)-1)
corr = rep(c(1,0), times = c(length(rts_corr), length(rts_err)))
temp = data.frame(corr = corr,
bins = bins)
caf = tapply(corr, bins, mean)
caf = data.frame(Bin = names(caf),
Caf = as.numeric(caf),
Cond = names(list_rts_corr))
return(list(caf))
}
container = c(caf_temp(list_rts_corr[1], list_rts_err[1]),
caf_temp(list_rts_cor[-1], list_rts_err[-1]))
return(container)
}
all_cafs = caf_temp(all_rts_corr, all_rts_err)
rm(list = ls())
one_dm = ratcliff_dm()
load_all()
rm(list = ls())
one_dm = ratcliff_dm()
# simulate data
data = simulate_data(one_dm, 10000, seed = 1)
# set the data
one_dm = set_data(drift_dm_obj = one_dm, obs_data = data, eval_model = T)
one_dm = set_solver_setting(one_dm, "solver", "bla")
drift_dm_obj = one_dm
all_rts_corr = drift_dm_obj$obs_data$rts_corr
all_rts_err = drift_dm_obj$obs_data$rts_err
all_rts_corr
all_rts_corr$bla = runif(100)
all_rts_err$bla = runif(100)
all_rts_err$foo = runif(100)
all_rts_corr$foo = runif(100)
stopifnot(all(names(all_rts_corr) == names(all_rts_err)))
# rts_corr and rts_err are a list of rts. Calculates the caf using recursion
caf_temp <- function(list_rts_corr, list_rts_err) {
stopifnot(length(list_rts_corr) == length(list_rts_err))
if (length(rts_corr) == 1) {
rts_corr = list_rts_corr[[1]]
rts_err = list_rts_err[[1]]
rts = c(rts_corr, rts_err)
probs = default_caf_probs()
borders <- quantile(rts, probs = probs)
bins <- cut(rts, breaks = borders, labels = FALSE, include.lowest = TRUE)
stopifnot(length(unique(bins)) ==  length(probs)-1)
corr = rep(c(1,0), times = c(length(rts_corr), length(rts_err)))
temp = data.frame(corr = corr,
bins = bins)
caf = tapply(corr, bins, mean)
caf = data.frame(Bin = names(caf),
Caf = as.numeric(caf),
Cond = names(list_rts_corr))
return(list(caf))
}
container = c(caf_temp(list_rts_corr[1], list_rts_err[1]),
caf_temp(list_rts_cor[-1], list_rts_err[-1]))
return(container)
}
all_cafs = caf_temp(all_rts_corr, all_rts_err)
# rts_corr and rts_err are a list of rts. Calculates the caf using recursion
caf_temp <- function(list_rts_corr, list_rts_err) {
stopifnot(length(list_rts_corr) == length(list_rts_err))
if (length(list_rts_corr) == 1) {
rts_corr = list_rts_corr[[1]]
rts_err = list_rts_err[[1]]
rts = c(rts_corr, rts_err)
probs = default_caf_probs()
borders <- quantile(rts, probs = probs)
bins <- cut(rts, breaks = borders, labels = FALSE, include.lowest = TRUE)
stopifnot(length(unique(bins)) ==  length(probs)-1)
corr = rep(c(1,0), times = c(length(rts_corr), length(rts_err)))
temp = data.frame(corr = corr,
bins = bins)
caf = tapply(corr, bins, mean)
caf = data.frame(Bin = names(caf),
Caf = as.numeric(caf),
Cond = names(list_rts_corr))
return(list(caf))
}
container = c(caf_temp(list_rts_corr[1], list_rts_err[1]),
caf_temp(list_rts_cor[-1], list_rts_err[-1]))
return(container)
}
all_cafs = caf_temp(all_rts_corr, all_rts_err)
# rts_corr and rts_err are a list of rts. Calculates the caf using recursion
caf_temp <- function(list_rts_corr, list_rts_err) {
stopifnot(length(list_rts_corr) == length(list_rts_err))
if (length(list_rts_corr) == 1) {
rts_corr = list_rts_corr[[1]]
rts_err = list_rts_err[[1]]
rts = c(rts_corr, rts_err)
probs = default_caf_probs()
borders <- quantile(rts, probs = probs)
bins <- cut(rts, breaks = borders, labels = FALSE, include.lowest = TRUE)
stopifnot(length(unique(bins)) ==  length(probs)-1)
corr = rep(c(1,0), times = c(length(rts_corr), length(rts_err)))
temp = data.frame(corr = corr,
bins = bins)
caf = tapply(corr, bins, mean)
caf = data.frame(Bin = names(caf),
Caf = as.numeric(caf),
Cond = names(list_rts_corr))
return(list(caf))
}
container = c(caf_temp(list_rts_corr[1], list_rts_err[1]),
caf_temp(list_rts_corr[-1], list_rts_err[-1]))
return(container)
}
all_cafs = caf_temp(all_rts_corr, all_rts_err)
all_cafs
# rts_corr and rts_err are a list of rts. Calculates the caf using recursion
caf_temp <- function(list_rts_corr, list_rts_err) {
stopifnot(length(list_rts_corr) == length(list_rts_err))
if (length(list_rts_corr) == 1) {
rts_corr = list_rts_corr[[1]]
rts_err = list_rts_err[[1]]
rts = c(rts_corr, rts_err)
probs = default_caf_probs()
borders <- quantile(rts, probs = probs)
bins <- cut(rts, breaks = borders, labels = FALSE, include.lowest = TRUE)
stopifnot(length(unique(bins)) ==  length(probs)-1)
corr = rep(c(1,0), times = c(length(rts_corr), length(rts_err)))
temp = data.frame(corr = corr,
bins = bins)
caf = tapply(corr, bins, mean)
caf = data.frame(Cond = names(list_rts_corr),
Bin = names(caf),
Caf = as.numeric(caf))
return(list(caf))
}
container = c(caf_temp(list_rts_corr[1], list_rts_err[1]),
caf_temp(list_rts_corr[-1], list_rts_err[-1]))
return(container)
}
all_cafs = caf_temp(all_rts_corr, all_rts_err)
all_cafs
all_cafs = do.call("rbind", caf_temp(all_rts_corr, all_rts_err))
all_cafs
list_rts_corr
list_rts_corr = all_rts_corr[1]
list_rts_err = all_rts_err[1]
list_rts_corr
length(list_rts_corr)
seq(0.1, 0.9, 0.1)
seq(0, 1, length.out = 4+1)
seq(0, 1, length.out = 5+1)
probs = seq(0.1, 0.9, 0.1)
rts_corr = list_rts_corr[[1]]
rts_err = list_rts_err[[1]]
rts_corr
rts_err
quantile(list_rts_corr[[1]], probs = probs)
quants_rts_err = quantile(list_rts_err[[1]], probs = probs)
quants_rts_err
quantile(numeric())
rep(probs, 2)
calc_quantiles_obs <- function(drift_dm_obj, probs = seq(0.1, 0.9, 0.1)) {
if (is.null(drift_dm_obj$obs_data$rts_corr))
return(NULL)
if (is.null(drift_dm_obj$obs_data$rts_err))
return(NULL)
all_rts_corr = drift_dm_obj$obs_data$rts_corr
all_rts_err = drift_dm_obj$obs_data$rts_err
stopifnot(all(names(all_rts_corr) == names(all_rts_err)))
# rts_corr and rts_err are a list of rts.
# Calculates the quantiles using recursion
quantile_temp <- function(list_rts_corr, list_rts_err) {
stopifnot(length(list_rts_corr) == length(list_rts_err))
if (length(list_rts_corr) == 1) {
quants_rts_corr = quantile(list_rts_corr[[1]], probs = probs)
quants_rts_err = quantile(list_rts_err[[1]], probs = probs)
quants = data.frame(Cond = names(list_rts_corr),
Prob = probs,
Quant_Corr = quants_rts_corr,
Quant_Err = quants_rts_corr)
return(list(quants))
}
container = c(quantile_temp(list_rts_corr[1], list_rts_err[1]),
quantile_temp(list_rts_corr[-1], list_rts_err[-1]))
return(container)
}
all_quants = do.call("rbind", quantile_temp(all_rts_corr, all_rts_err))
return(all_quants)
}
# rts_corr and rts_err are a list of rts.
# Calculates the quantiles using recursion
quantile_temp <- function(list_rts_corr, list_rts_err) {
stopifnot(length(list_rts_corr) == length(list_rts_err))
if (length(list_rts_corr) == 1) {
quants_rts_corr = quantile(list_rts_corr[[1]], probs = probs)
quants_rts_err = quantile(list_rts_err[[1]], probs = probs)
quants = data.frame(Cond = names(list_rts_corr),
Prob = probs,
Quant_Corr = quants_rts_corr,
Quant_Err = quants_rts_corr)
return(list(quants))
}
container = c(quantile_temp(list_rts_corr[1], list_rts_err[1]),
quantile_temp(list_rts_corr[-1], list_rts_err[-1]))
return(container)
}
quantile_temp(all_rts_corr)
quantile_temp(all_rts_corr, all_rts_err)
# rts_corr and rts_err are a list of rts.
# Calculates the quantiles using recursion
quantile_temp <- function(list_rts_corr, list_rts_err) {
stopifnot(length(list_rts_corr) == length(list_rts_err))
if (length(list_rts_corr) == 1) {
quants_rts_corr = quantile(list_rts_corr[[1]], probs = probs)
quants_rts_err = quantile(list_rts_err[[1]], probs = probs)
quants_rts_corr = unname(quants_rts_corr)
quants_rts_err = unname(quants_rts_err)
quants = data.frame(Cond = names(list_rts_corr),
Prob = probs,
Quant_Corr = quants_rts_corr,
Quant_Err = quants_rts_corr)
return(list(quants))
}
container = c(quantile_temp(list_rts_corr[1], list_rts_err[1]),
quantile_temp(list_rts_corr[-1], list_rts_err[-1]))
return(container)
}
quantile_temp(all_rts_corr)
quantile_temp(all_rts_corr, all_rts_err)
all_quants = do.call("rbind", quantile_temp(all_rts_corr, all_rts_err))
all_quants
calc_quantiles_obs <- function(drift_dm_obj, probs = seq(0.1, 0.9, 0.1)) {
if (is.null(drift_dm_obj$obs_data$rts_corr))
return(NULL)
if (is.null(drift_dm_obj$obs_data$rts_err))
return(NULL)
all_rts_corr = drift_dm_obj$obs_data$rts_corr
all_rts_err = drift_dm_obj$obs_data$rts_err
stopifnot(all(names(all_rts_corr) == names(all_rts_err)))
# rts_corr and rts_err are a list of rts.
# Calculates the quantiles using recursion
quantile_temp <- function(list_rts_corr, list_rts_err) {
stopifnot(length(list_rts_corr) == length(list_rts_err))
if (length(list_rts_corr) == 1) {
quants_rts_corr = quantile(list_rts_corr[[1]], probs = probs)
quants_rts_err = quantile(list_rts_err[[1]], probs = probs)
quants_rts_corr = unname(quants_rts_corr)
quants_rts_err = unname(quants_rts_err)
quants = data.frame(Cond = names(list_rts_corr),
Prob = probs,
Quant_Corr = quants_rts_corr,
Quant_Err = quants_rts_err)
return(list(quants))
}
container = c(quantile_temp(list_rts_corr[1], list_rts_err[1]),
quantile_temp(list_rts_corr[-1], list_rts_err[-1]))
return(container)
}
all_quants = do.call("rbind", quantile_temp(all_rts_corr, all_rts_err))
return(all_quants)
}
calc_quantiles_obs(one_dm)
calc_cafs_obs <- function(drift_dm_obj, n_bins = 5) {
if (is.null(drift_dm_obj$obs_data$rts_corr))
return(NULL)
if (is.null(drift_dm_obj$obs_data$rts_err))
return(NULL)
all_rts_corr = drift_dm_obj$obs_data$rts_corr
all_rts_err = drift_dm_obj$obs_data$rts_err
stopifnot(all(names(all_rts_corr) == names(all_rts_err)))
# rts_corr and rts_err are a list of rts. Calculates the caf using recursion
caf_temp <- function(list_rts_corr, list_rts_err, n_bins) {
stopifnot(length(list_rts_corr) == length(list_rts_err))
if (length(list_rts_corr) == 1) {
rts_corr = list_rts_corr[[1]]
rts_err = list_rts_err[[1]]
rts = c(rts_corr, rts_err)
probs = seq(0, 1, length.out = n_bins + 1)
borders <- quantile(rts, probs = probs)
bins <- cut(rts, breaks = borders, labels = FALSE, include.lowest = TRUE)
stopifnot(length(unique(bins)) ==  length(probs)-1)
corr = rep(c(1,0), times = c(length(rts_corr), length(rts_err)))
caf = tapply(corr, bins, mean)
caf = data.frame(Cond = names(list_rts_corr),
Bin = names(caf),
P_Corr = as.numeric(caf))
return(list(caf))
}
container = c(caf_temp(list_rts_corr[1], list_rts_err[1], n_bins),
caf_temp(list_rts_corr[-1], list_rts_err[-1], n_bins))
return(container)
}
all_cafs = do.call("rbind", caf_temp(all_rts_corr, all_rts_err, n_bins))
return(all_cafs)
}
calc_cafs_obs(one_dm)
