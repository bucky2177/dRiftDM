% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/core_flex_prms.R, R/formatting_flex_prms.R
\name{flex_prms}
\alias{flex_prms}
\alias{print.flex_prms}
\title{Create a flex_prms object}
\usage{
flex_prms(prms_model, conds, instr = NULL)

\method{print}{flex_prms}(
  x,
  round_digits = drift_dm_default_rounding(),
  dependencies = T,
  cust_parameters = T
)
}
\arguments{
\item{prms_model}{A named numeric vector of the model parameters. The names
indicate the model's parameters, and the numeric entries provide the current
parameter values.}

\item{conds}{A character vector, giving the names of the model's conditions.
values within \code{conds} will be used when addressing the data and when
deriving the model's predictions}

\item{instr}{optional string with instructions, see the details below}

\item{round_digits}{integer, indicating the number of decimal places (round)
to be used (default is 3)}

\item{dependencies}{logical, controlling if a summary of the special
dependencies shall be printed}

\item{cust_parameters}{logical, controlling if a summary of the custom
parameters shall be printed}
}
\value{
A list with the class label "flex_prms". It containts three entries:
\itemize{
\item A nested list \code{internal_list}. This list specifies the dependencies
and restrains enforced upon the parameters across conditions. Integers >= 1
indicate that this parameter will be estimated for a specific condition, and
conditions with the same number refer to a single parameter. Integers == 0
indicate thtat this parameter will not be esitmated for a specific condition
(i.e., it is considered "fixed"). Expressions will be evaluated on run time
and specify special dependencies among parameters.
\item A nested list \code{linear_internal_list}. This list essentially contains
the same information as \code{internal_list}, but the parameters are sorted so
that they can be mapped to an integer vector (relevant only in the depths of
the package for the minimization routines).
\item A numeric matrix \code{prms_matrix} which contains the currently set values for
each parameter across all conditions. Per default, the values of each
parameter are set equal across all conditions. Additionally, each parameter
is assumed to be restrained as equal across all conditions.
The values for all parameters given a condition will be passed to the
component functions (see \link{set_component_funs}).
\item (optional) A list of additional parameters \code{cust_prms} that are derived from
the parameters in \code{prms_matrix}.
}
}
\description{
Create a flex_prms object
}
\details{
Any object of type \code{flex_prms}, that is part of a \code{drift_dm}
object, is meant as a user-friendly entry to specying
dependencies, parameter values etc. for a model. Objects of this type can be
modified using the \link{set_model_prms} function and a corresponding set
of "instructions". These instructions are inspired by the model syntax of
the \code{lavaan} package. The following instructions are possible:

The "vary" instruction:
\itemize{
\item Looks something like "a ~ foo + bar"
\item This means that the parameter 'a' is allowed to vary independently for the
conditions 'foo' and 'bar'
\item Thus, when estimating the model, the user will have independent values
for 'a' in conditions 'foo' and 'bar'
}

The "restrain" instruction:
\itemize{
\item Looks something like "a ~! foo + bar "
\item This means that the parameter 'a' is assumed to be identical for the
conditions 'foo' and 'bar'
\item Thus, when estimating the model, the user will have only a single value
for 'a' in conditions 'foo' and 'bar'
}

The "set" instruction:
\itemize{
\item Users may not always estimate a model directly but rather explore the
model behavior. In this case setting the value of a parameter is necssary.
\item The corresponding instruction looks something like "a ~ foo => 0.3"
\item This will set the value for 'a' in condition 'foo' to the value of 0.3
}

The "fix" instruction:
\itemize{
\item Oftentimes, certain parameters of a model are considered "fixed", so that
they don't vary while the remaining parameters are estimated. An example
would be the shape parameter 'a' of DMC (see \link{dmc_dm}).
\item The corresponding instruction looks something like "a <!> foo + bar"
\item Usually, users want to call the "set" instruction prior or after the "fix"
instruction, to set the corresponding parameter to a certain value.
}

The "special dependency" instruction:
\itemize{
\item Sometimes, users wish to allow one parameter to depend on another. For
instance, in DMC (see \link{dmc_dm}), the parameter A is positive in
the congruent condition, but negative in the incongruent condition. Thus,
parameters may have a 'special depencency' which can be expressed as an
equation.
\item To define a special dependency, users can use the operation "==".
The parameter that should have the dependency is on the left-hand side,
while the mathematical relationship to other parameters is defined on the
right-hand side.
\item This then looks something like "a ~ foo == -(a ~ bar)".
\item This means that the parameter a in condition foo will always be
-1 * the parameter a in condition bar. Thus, if a in condition bar
has the value 5, then a in condition foo will be -5.
\item The expression on the right-side can refer to any arbitrary
mathematical relation.
\item Important: Make sure that each 'parameter ~ condition' combination are set
in brackets.
\item Another example: Parameter a in condition foo should be the mean of the
parameter b in conditions bar and baz; this would be the instruction
"a ~ foo == 0.5*(b ~ bar) + 0.5*(b ~ baz)"
}

The "additional/custom parameter combination" instruction:
\itemize{
\item Sometimes, users may wish to combine multiple parameters to summarize
a certain property of the model. For example, in DMC (see \link{dmc_dm}),
the shape and rate parameter jointly determine the peak latency.
\item To avoid to manually calculate this, users can define "custom"
parameter combinations with the ":=" operation:
\item An examplary instruction might look like this:
"peak_l := (a - 2) * tau"
\item Expressions and values that provide calculations for those parameters are
stored in a separate list \code{cust_prms}.
}
}
\examples{
conds <- c("foo", "bar")
prms <- c(a = 3, b = 4)
one_instr <- "a ~ foo + bar"
flex_prms_obj <- flex_prms(prms_model = prms, conds = conds,
                           instr = one_instr)

}
